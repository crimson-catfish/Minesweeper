//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Input/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Grid"",
            ""id"": ""5b1f9f2a-994f-4c96-81b7-e4146a135e16"",
            ""actions"": [
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""f1b52cfe-4686-464c-917c-b802cbf3d648"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Reveal"",
                    ""type"": ""Button"",
                    ""id"": ""ef8ee1a5-1312-418f-abc3-a9b8a7b51d5b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Mark"",
                    ""type"": ""Button"",
                    ""id"": ""4e66da66-bf94-41e4-b963-63ae23a300e7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6a207dfb-d68d-478e-84de-4e58db346c4d"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Main"",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2b396416-a91a-49f3-81f6-f7e65be41d88"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Main"",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0b6c7372-2483-4f2a-8763-537b576f742d"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reveal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""399ab4bd-8592-4706-be02-c015d1464187"",
                    ""path"": ""<Touchscreen>/primaryTouch/tap"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reveal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bd41ce12-c179-4149-b488-79e6c1bba969"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mark"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""67f3de57-4cac-4ba2-9943-850bc1d022ac"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mark"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Main"",
            ""bindingGroup"": ""Main"",
            ""devices"": []
        }
    ]
}");
        // Grid
        m_Grid = asset.FindActionMap("Grid", throwIfNotFound: true);
        m_Grid_Position = m_Grid.FindAction("Position", throwIfNotFound: true);
        m_Grid_Reveal = m_Grid.FindAction("Reveal", throwIfNotFound: true);
        m_Grid_Mark = m_Grid.FindAction("Mark", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Grid
    private readonly InputActionMap m_Grid;
    private List<IGridActions> m_GridActionsCallbackInterfaces = new List<IGridActions>();
    private readonly InputAction m_Grid_Position;
    private readonly InputAction m_Grid_Reveal;
    private readonly InputAction m_Grid_Mark;
    public struct GridActions
    {
        private @Controls m_Wrapper;
        public GridActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Position => m_Wrapper.m_Grid_Position;
        public InputAction @Reveal => m_Wrapper.m_Grid_Reveal;
        public InputAction @Mark => m_Wrapper.m_Grid_Mark;
        public InputActionMap Get() { return m_Wrapper.m_Grid; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GridActions set) { return set.Get(); }
        public void AddCallbacks(IGridActions instance)
        {
            if (instance == null || m_Wrapper.m_GridActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GridActionsCallbackInterfaces.Add(instance);
            @Position.started += instance.OnPosition;
            @Position.performed += instance.OnPosition;
            @Position.canceled += instance.OnPosition;
            @Reveal.started += instance.OnReveal;
            @Reveal.performed += instance.OnReveal;
            @Reveal.canceled += instance.OnReveal;
            @Mark.started += instance.OnMark;
            @Mark.performed += instance.OnMark;
            @Mark.canceled += instance.OnMark;
        }

        private void UnregisterCallbacks(IGridActions instance)
        {
            @Position.started -= instance.OnPosition;
            @Position.performed -= instance.OnPosition;
            @Position.canceled -= instance.OnPosition;
            @Reveal.started -= instance.OnReveal;
            @Reveal.performed -= instance.OnReveal;
            @Reveal.canceled -= instance.OnReveal;
            @Mark.started -= instance.OnMark;
            @Mark.performed -= instance.OnMark;
            @Mark.canceled -= instance.OnMark;
        }

        public void RemoveCallbacks(IGridActions instance)
        {
            if (m_Wrapper.m_GridActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGridActions instance)
        {
            foreach (var item in m_Wrapper.m_GridActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GridActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GridActions @Grid => new GridActions(this);
    private int m_MainSchemeIndex = -1;
    public InputControlScheme MainScheme
    {
        get
        {
            if (m_MainSchemeIndex == -1) m_MainSchemeIndex = asset.FindControlSchemeIndex("Main");
            return asset.controlSchemes[m_MainSchemeIndex];
        }
    }
    public interface IGridActions
    {
        void OnPosition(InputAction.CallbackContext context);
        void OnReveal(InputAction.CallbackContext context);
        void OnMark(InputAction.CallbackContext context);
    }
}
